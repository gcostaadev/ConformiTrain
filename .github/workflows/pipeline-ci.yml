# Nome do nosso workflow, que aparecerá no separador "Actions" do GitHub
name: CI/CD - Build, Teste, Push e Deploy da Aplicação

# Define o gatilho (trigger) para este workflow.
on:
  push:
    branches: [ "main" ]

# Define os trabalhos (jobs) que serão executados.
jobs:
  # Trabalho 1: Executar os testes da aplicação
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do código
        uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
      - name: Restaurar dependências
        run: dotnet restore
      - name: Executar testes
        run: dotnet test --no-restore --verbosity normal

  # Trabalho 2: Construir a imagem e publicá-la no Docker Hub
  build-and-push:
    runs-on: ubuntu-latest
    # Este trabalho só será executado se os testes passarem
    needs: test
    steps:
      - name: Checkout do código
        uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login no Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build e push da imagem
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/conformitrain-api:latest

  # Trabalho 3: Fazer o deploy da nova imagem no ambiente de Staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Deploy para o servidor de Staging
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USERNAME }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          script: |
            cd /home/gcostadev/conformitrain
            docker-compose pull
            docker-compose up -d

  # Trabalho 4: Fazer o deploy da nova imagem no ambiente de Produção
  deploy-production:
    runs-on: ubuntu-latest
    needs: deploy-staging
    # Adiciona um ambiente e um passo de aprovação manual no GitHub Actions
    environment:
      name: production
      url: http://${{ secrets.PRODUCTION_HOST }}
    steps:
      - name: Deploy para o servidor de Produção
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USERNAME }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          script: |
            cd /home/gcostadev/conformitrain-prod
            docker-compose pull
            docker-compose up -d
