# Nome do nosso workflow, que aparecerá no separador "Actions" do GitHub
name: CI/CD - Build, Teste, Push e Deploy Simulado

# Define o gatilho (trigger) para este workflow.
on:
  push:
    branches: [ "main" ]

# Define os trabalhos (jobs) que serão executados.
jobs:
  # Trabalho 1: Executar os testes de API (BDD) com Docker Compose
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      # O docker-compose precisa do .env para a senha do banco
      - name: Criar arquivo .env
        run: |
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" > .env

      # Executa o serviço 'test-runner' do docker-compose.
      # O --build garante que as imagens (API e Teste) sejam construídas.
      # O docker-compose irá automaticamente subir as dependências (db e conformitrain-api).
      # Se os testes BDD falharem, este passo falhará, interrompendo o pipeline.
      - name: Executar testes de integração BDD
        run: docker-compose run --build test-runner

  # Trabalho 2: Construir a imagem e publicá-la no Docker Hub
  build-and-push:
    runs-on: ubuntu-latest
    # Este trabalho só será executado se os testes passarem
    needs: test
    steps:
      - name: Checkout do código
        uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login no Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build e push da imagem
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/conformitrain-api:latest

  # Trabalho 3: Simular o deploy da nova imagem no ambiente de Staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: build-and-push
    environment:
      name: staging
    steps:
      - name: Simular deploy para Staging
        run: echo "Deploy para Staging concluído com sucesso!"

  # Trabalho 4: Simular o deploy da nova imagem no ambiente de Produção
  deploy-production:
    runs-on: ubuntu-latest
    needs: deploy-staging
    environment:
      name: production
    steps:
      - name: Simular deploy para Produção
        run: echo "Deploy para Produção aprovado e concluído com sucesso!"
            